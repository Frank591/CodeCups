package fsl.rcc2016.warmup;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

/**
 * "B" Хаос
 * Ограничение по времени 	2 секунды
 * Ограничение по памяти 	256 мегабайт
 * <p>
 * Расставлять кости домино и наблюдать за их падением — недостаточно интересное занятие для Дока Брауна. Поэтому он придумал более математическое развлечение.
 * <p>
 * На доске находятся n чисел. Док много раз применяет следующий алгоритм:
 * <p>
 * Выбирает три любых числа, написанных на доске, и стирает их.
 * Из этой тройки Док выбирает два числа и вычисляет их среднее арифметическое с округлением вниз.
 * Затем он пишет на доске два раза полученное среднее арифметическое.
 * <p>
 * Например, если на доске были написаны числа 1, 2 и 4, то после их удаления с доски, Док может написать две 1 (среднее 1 и 2, округленное вниз), две 2 (среднее 1 и 4, округленное вниз) или две 3 (среднее 2 и 4). Процесс останавливается, когда на доске останутся два числа. Ясно, что эти два числа равны.
 * <p>
 * Однажды Марти наблюдал за этой забавой, которая похожа на последовательность случайных действий. В конце Док заметил, что оставшиеся на доске одинаковые числа получились максимально возможными. Марти не верит Доку, но он запомнил числа, которые изначально были написаны на доске. Он просит вас написать программу, определяющую максимальное возможное значение чисел, которые могли остаться на доске после выполнения алгоритма.
 * Формат входных данных
 * <p>
 * В первой строке задано одно целое число n (3 ≤ n ≤ 105) — количество чисел, написанных на доске.
 * <p>
 * Вторая строка состоит из n целых чисел ai (1 ≤ ai ≤ 109) — числа, написанные на доске.
 * Формат выходных данных
 * <p>
 * Выведите одно число — максимальное значение двух чисел оставшихся на доске, которое могло получится.
 * Примеры
 * Входные данные
 * <p>
 * 3
 * 1 4 2
 * <p>
 * Выходные данные
 * <p>
 * 3
 * <p>
 * <p>
 * Входные данные
 * <p>
 * 5
 * 3 3 3 3 3
 * <p>
 * Выходные данные
 * <p>
 * 3
 */
public class Warmup_2 {

    public static void run() {
        int numberCount;
        long result = 0;

        try {
            BufferedReader bufferRead = new BufferedReader(new InputStreamReader(System.in));
            numberCount = Integer.parseInt(bufferRead.readLine());

            Long[] numbers = new Long[numberCount];
            String numbersStr = bufferRead.readLine();
            String[] splittedNumbersStr = numbersStr.split(" ");

            for (int i = 0; i < numberCount; i++) {
                numbers[i] = Long.parseLong(splittedNumbersStr[i]);
            }

            Arrays.sort(numbers);

            result = (numbers[numberCount - 1] + numbers[numberCount - 2]) / 2;

        } catch (IOException e) {
            e.printStackTrace();
        }


        System.out.println(result);
    }
}
